<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <!-- Tailwind CSS via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Custom Tailwind Configuration with Extra Small Breakpoint -->
  <script>
    tailwind.config = {
      theme: {
        screens: {
          'xs': '375px',  // Extra small devices (phones, 375px and up)
          'sm': '640px',  // Small devices (tablets, 640px and up)
          'md': '768px',  // Medium devices (tablets, 768px and up)
          'lg': '1024px', // Large devices (desktops, 1024px and up)
          'xl': '1280px', // Extra large devices (large desktops, 1280px and up)
          '2xl': '1536px' // 2X large devices (larger desktops, 1536px and up)
        },
        extend: {
          colors: {
            primary: '#2563eb',    // More refined blue
            secondary: '#8b5cf6',  // Refined purple
            accent: '#f59e0b',     // Refined amber
            dark: '#111827',       // Deeper dark
            light: '#f9fafb',      // Cleaner light
            'gray-dark': '#374151',
            'gray-medium': '#6b7280',
            'gray-light': '#e5e7eb'
          },
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
            display: ['Plus Jakarta Sans', 'sans-serif']
          },
          boxShadow: {
            'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
            'card': '0 0 25px rgba(0, 0, 0, 0.04)',
            'button': '0 4px 6px -1px rgba(37, 99, 235, 0.1), 0 2px 4px -1px rgba(37, 99, 235, 0.06)'
          }
        }
      }
    }
  </script>
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Plus+Jakarta+Sans:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/style.css">
  <!-- Main JS -->
  <script src="/js/main.js" defer></script>
  <!-- Custom Styles -->
  <style>
    /* Theme variables */
    :root {
      --text-color: #111827;
      --text-secondary: #374151;
      --text-muted: #6b7280;
      --bg-color: #f9fafb;
      --card-bg: #ffffff;
      --primary-color: #2563eb;
      --secondary-color: #8b5cf6;
      --accent-color: #f59e0b;
      --shadow-soft: 0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04);
      --shadow-card: 0 0 25px rgba(0, 0, 0, 0.04);
      --shadow-button: 0 4px 6px -1px rgba(37, 99, 235, 0.1), 0 2px 4px -1px rgba(37, 99, 235, 0.06);
    }

    [data-theme="dark"] {
      --text-color: #f9fafb;
      --text-secondary: #e5e7eb;
      --text-muted: #9ca3af;
      --bg-color: #111827;
      --card-bg: #1e293b;
      --shadow-soft: 0 2px 15px -3px rgba(0, 0, 0, 0.2), 0 10px 20px -2px rgba(0, 0, 0, 0.15);
      --shadow-card: 0 0 25px rgba(0, 0, 0, 0.2);
      --shadow-button: 0 4px 6px -1px rgba(37, 99, 235, 0.2), 0 2px 4px -1px rgba(37, 99, 235, 0.15);
    }

    /* Gradient animations */
    .gradient-text {
      background: linear-gradient(90deg, #2563eb, #8b5cf6, #f59e0b);
      background-size: 200% auto;
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      animation: gradient-text 12s ease infinite;
    }

    @keyframes gradient-text {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    /* Subtle hover animations */
    .hover-lift {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .hover-lift:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-soft);
    }

    /* Modern card styles */
    .card-modern {
      border-radius: 16px;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      box-shadow: var(--shadow-card);
      transition: all 0.3s ease;
    }

    .card-modern:hover {
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.3);
    }

    /* Smooth scrolling */
    html {
      scroll-behavior: smooth;
    }
  </style>
</head>
<body class="font-sans bg-dark text-white" data-theme="dark">
  <!-- Custom cursor elements -->
  <div class="cursor-container">
    <div class="cursor-dot"></div>
    <div class="cursor-circle"></div>
    <div class="cursor-circle-outer"></div>
  </div>
  <!-- Header - Fully Responsive for All Devices -->
  <header class="fixed w-full z-50 bg-bg-secondary/80 backdrop-blur-md shadow-soft border-b border-border-color">
    <div class="container mx-auto px-3 sm:px-4 md:px-6 py-2 sm:py-3 md:py-4">
      <div class="flex justify-between items-center">
        <a href="#" class="text-xl xs:text-xl sm:text-2xl font-display font-bold">
          <span class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">Krish</span><span class="text-primary font-light">.Design</span>
        </a>

        <nav class="hidden md:flex items-center space-x-1">
          <a href="#home" class="px-3 lg:px-4 py-2 text-sm lg:text-base font-medium text-text-secondary hover:text-primary transition-colors rounded-full hover:bg-primary/10">Home</a>
          <a href="#skills" class="px-3 lg:px-4 py-2 text-sm lg:text-base font-medium text-text-secondary hover:text-primary transition-colors rounded-full hover:bg-primary/10">Skills</a>
          <a href="#portfolio" class="px-3 lg:px-4 py-2 text-sm lg:text-base font-medium text-text-secondary hover:text-primary transition-colors rounded-full hover:bg-primary/10">Portfolio</a>
          <a href="#about" class="px-3 lg:px-4 py-2 text-sm lg:text-base font-medium text-text-secondary hover:text-primary transition-colors rounded-full hover:bg-primary/10">About</a>
          <a href="#contact" class="ml-1 lg:ml-2 px-4 lg:px-5 py-2 text-sm lg:text-base font-medium text-white bg-gradient-to-r from-primary to-secondary hover:opacity-90 transition-all rounded-full shadow-button hover:shadow-glow">
            <span class="flex items-center">
              <span>Contact</span>
              <i class="fas fa-arrow-right ml-2 text-xs transition-transform group-hover:translate-x-1"></i>
            </span>
          </a>
        </nav>

        <!-- Mobile menu button -->
        <button id="mobile-menu-button" class="md:hidden p-1.5 sm:p-2 rounded-full hover:bg-bg-secondary transition-colors">
          <i class="fas fa-bars text-text-secondary text-lg sm:text-xl"></i>
        </button>
      </div>

      <!-- Mobile menu -->
      <div id="mobile-menu" class="md:hidden hidden mt-3 pb-2 rounded-xl sm:rounded-2xl bg-bg-secondary/95 backdrop-blur-md shadow-soft p-3 sm:p-4 absolute left-3 right-3 sm:left-4 sm:right-4 top-12 sm:top-14 md:top-16 border border-border-color z-50">
        <div class="flex flex-col space-y-1 sm:space-y-2">
          <a href="#home" class="px-3 sm:px-4 py-2 sm:py-3 text-sm font-medium text-text-secondary hover:text-primary transition-colors hover:bg-primary/10 rounded-lg">Home</a>
          <a href="#skills" class="px-3 sm:px-4 py-2 sm:py-3 text-sm font-medium text-text-secondary hover:text-primary transition-colors hover:bg-primary/10 rounded-lg">Skills</a>
          <a href="#portfolio" class="px-3 sm:px-4 py-2 sm:py-3 text-sm font-medium text-text-secondary hover:text-primary transition-colors hover:bg-primary/10 rounded-lg">Portfolio</a>
          <a href="#about" class="px-3 sm:px-4 py-2 sm:py-3 text-sm font-medium text-text-secondary hover:text-primary transition-colors hover:bg-primary/10 rounded-lg">About</a>
          <a href="#contact" class="px-3 sm:px-4 py-2 sm:py-3 text-sm font-medium text-text-secondary hover:text-primary transition-colors hover:bg-primary/10 rounded-lg">Contact</a>
        </div>
      </div>
    </div>
  </header>

  <!-- Three.js and GSAP Libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>

  <!-- Futuristic Hero Section with Three.js and GSAP -->
  <section id="home" class="relative min-h-screen overflow-hidden">
    <!-- Three.js Canvas -->
    <div id="hero-canvas" class="absolute inset-0 z-0"></div>

    <!-- Overlay gradient for better text readability -->
    <div class="absolute inset-0 bg-gradient-to-b from-bg-color/90 via-bg-color/70 to-bg-color/90 z-10"></div>

    <!-- Content Container - Fully Responsive -->
    <div class="container relative z-20 mx-auto px-3 xs:px-4 sm:px-6 h-screen flex flex-col justify-center">
      <!-- Mobile Hero Badge (Only visible on mobile) -->
      <div class="md:hidden flex justify-center mb-6">
        <div class="inline-flex items-center px-3 py-1.5 bg-bg-secondary/90 backdrop-blur-md rounded-full text-primary font-medium text-xs mb-2 hero-badge-mobile border border-primary/60 shadow-lg relative z-30">
          <span class="w-1.5 h-1.5 bg-primary rounded-full mr-1.5 pulse-dot"></span>
          <span class="typing-text font-mono">Designer & Video Editor</span>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-12 gap-6 md:gap-8 items-center">
        <!-- Left Content Column -->
        <div class="md:col-span-7 md:text-left text-center">
          <!-- Professional Badge - Responsive (Hidden on mobile, shown on larger screens) -->
          <div class="hidden md:inline-flex items-center px-3 xs:px-3 sm:px-4 py-1.5 xs:py-1.5 sm:py-2 bg-bg-secondary/80 backdrop-blur-md rounded-full text-primary font-medium text-xs xs:text-xs sm:text-sm mb-4 xs:mb-6 sm:mb-8 hero-badge border border-primary/50 shadow-lg relative z-30">
            <span class="w-1.5 xs:w-1.5 sm:w-2 h-1.5 xs:h-1.5 sm:h-2 bg-primary rounded-full mr-1.5 xs:mr-1.5 sm:mr-2 pulse-dot"></span>
            <span class="typing-text font-mono">Designer & Video Editor</span>
          </div>

          <!-- Main Heading with Responsive Typography -->
          <h1 class="text-3xl xs:text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-display font-bold mb-4 xs:mb-5 sm:mb-6 hero-title tracking-tight">
            <span class="block text-text-color glitch-text mb-1 xs:mb-1 sm:mb-2" data-text="I'm">I'm</span>
            <span class="block text-transparent bg-clip-text bg-gradient-to-r from-primary via-secondary to-accent hero-name">Krish Mandal</span>
          </h1>

          <!-- Professional Subtitle - Responsive for All Devices -->
          <p class="text-base xs:text-lg sm:text-xl md:text-2xl text-text-secondary mb-6 xs:mb-8 sm:mb-10 max-w-xl hero-subtitle leading-relaxed">
            Creating futuristic designs and compelling visual stories that transcend the ordinary.
          </p>

          <!-- Interactive Buttons with Enhanced Hover Effects - Responsive for All Devices -->
          <div class="flex md:justify-start justify-center gap-3 xs:gap-4 sm:gap-6 mb-6 xs:mb-8 sm:mb-10 hero-buttons">
            <a href="#portfolio" class="group relative px-4 xs:px-6 sm:px-8 py-2 xs:py-3 sm:py-4 bg-transparent overflow-hidden rounded-md transform transition-all duration-500 hover:scale-105 hover:-translate-y-1 w-full max-w-[160px] xs:max-w-[180px] sm:max-w-none">
              <!-- Button background effect with animated gradient -->
              <span class="absolute inset-0 w-full h-full bg-gradient-to-r from-primary to-secondary opacity-90 button-bg group-hover:bg-gradient-to-r group-hover:from-primary/90 group-hover:via-secondary/90 group-hover:to-primary/90 transition-all duration-700 bg-size-200 group-hover:bg-pos-100"></span>
              <!-- Enhanced glow effect -->
              <span class="absolute inset-0 w-full h-full bg-primary opacity-0 blur-xl group-hover:opacity-40 transition-all duration-500"></span>
              <!-- Animated particles on hover -->
              <span class="particle-1 absolute w-1 xs:w-1.5 sm:w-2 h-1 xs:h-1.5 sm:h-2 rounded-full bg-white/80 opacity-0 group-hover:opacity-100 transition-all duration-300 blur-sm"></span>
              <span class="particle-2 absolute w-0.5 xs:w-0.5 sm:w-1 h-0.5 xs:h-0.5 sm:h-1 rounded-full bg-white/80 opacity-0 group-hover:opacity-100 transition-all duration-300 blur-sm"></span>
              <span class="particle-3 absolute w-1 xs:w-1 sm:w-1.5 h-1 xs:h-1 sm:h-1.5 rounded-full bg-white/80 opacity-0 group-hover:opacity-100 transition-all duration-300 blur-sm"></span>
              <!-- Button text with enhanced animation -->
              <span class="relative flex items-center justify-center text-white font-medium text-sm xs:text-base sm:text-base whitespace-nowrap">
                <span class="group-hover:tracking-wider transition-all duration-500">View My Work</span>
                <i class="fas fa-arrow-right ml-1 xs:ml-1.5 sm:ml-2 text-xs group-hover:translate-x-1 xs:group-hover:translate-x-1.5 sm:group-hover:translate-x-2 transition-all duration-500 ease-out"></i>
              </span>
            </a>

            <a href="#contact" class="group relative px-4 xs:px-6 sm:px-8 py-2 xs:py-3 sm:py-4 bg-transparent overflow-hidden rounded-md transform transition-all duration-500 hover:scale-105 hover:-translate-y-1 w-full max-w-[160px] xs:max-w-[180px] sm:max-w-none">
              <!-- Button border effect with animated gradient -->
              <span class="absolute inset-0 w-full h-full border border-primary/50 rounded-md button-border group-hover:border-opacity-0 transition-all duration-500"></span>
              <!-- Animated background on hover -->
              <span class="absolute inset-0 w-full h-full bg-gradient-to-r from-primary/10 to-secondary/10 opacity-0 group-hover:opacity-100 transition-all duration-500"></span>
              <!-- Animated glow line at bottom -->
              <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-primary to-secondary group-hover:w-full transition-all duration-700 ease-out"></span>
              <!-- Button text with enhanced animation -->
              <span class="relative flex items-center justify-center text-text-secondary group-hover:text-primary transition-all duration-500 font-medium text-sm xs:text-base sm:text-base whitespace-nowrap">
                <span class="group-hover:tracking-wider transition-all duration-500">Contact Me</span>
                <i class="fas fa-envelope ml-1 xs:ml-1.5 sm:ml-2 text-xs group-hover:translate-x-1 xs:group-hover:translate-x-1.5 sm:group-hover:translate-x-2 transition-all duration-500 ease-out"></i>
              </span>
            </a>
          </div>

          <!-- Social Links with Enhanced Interactive Effects - Responsive for All Devices -->
          <div class="flex md:justify-start justify-center items-center space-x-3 xs:space-x-4 sm:space-x-5 social-links">
            <span class="text-xs xs:text-sm sm:text-sm font-medium text-text-secondary mr-1 xs:mr-1.5 sm:mr-2">Follow me:</span>
            <a href="https://www.instagram.com/krish.design.np/" class="social-icon group" target="_blank">
              <div class="relative w-8 h-8 xs:w-9 xs:h-9 sm:w-10 sm:h-10 rounded-full bg-bg-secondary/40 backdrop-blur-md flex items-center justify-center shadow-md transform transition-all duration-500 group-hover:scale-110 group-hover:shadow-glow-primary overflow-hidden">
                <!-- Animated background glow -->
                <div class="absolute inset-0 bg-gradient-to-r from-primary/20 to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                <!-- Animated border effect -->
                <div class="absolute inset-0 border border-primary/20 rounded-full group-hover:border-primary/60 transition-colors duration-500"></div>
                <!-- Animated ripple effect -->
                <div class="absolute inset-0 scale-0 rounded-full border border-primary/40 group-hover:scale-150 group-hover:opacity-0 transition-all duration-1000"></div>
                <!-- Icon with enhanced animation -->
                <i class="fab fa-instagram text-text-secondary group-hover:text-primary transition-all duration-500 relative z-10 text-sm xs:text-base sm:text-lg group-hover:text-base xs:group-hover:text-lg sm:group-hover:text-xl"></i>
              </div>
            </a>
            <a href="https://www.behance.net/krishdesign" class="social-icon group" target="_blank">
              <div class="relative w-8 h-8 xs:w-9 xs:h-9 sm:w-10 sm:h-10 rounded-full bg-bg-secondary/40 backdrop-blur-md flex items-center justify-center shadow-md transform transition-all duration-500 group-hover:scale-110 group-hover:shadow-glow-secondary overflow-hidden">
                <!-- Animated background glow -->
                <div class="absolute inset-0 bg-gradient-to-r from-secondary/20 to-secondary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                <!-- Animated border effect -->
                <div class="absolute inset-0 border border-secondary/20 rounded-full group-hover:border-secondary/60 transition-colors duration-500"></div>
                <!-- Animated ripple effect -->
                <div class="absolute inset-0 scale-0 rounded-full border border-secondary/40 group-hover:scale-150 group-hover:opacity-0 transition-all duration-1000"></div>
                <!-- Icon with enhanced animation -->
                <i class="fab fa-behance text-text-secondary group-hover:text-secondary transition-all duration-500 relative z-10 text-sm xs:text-base sm:text-lg group-hover:text-base xs:group-hover:text-lg sm:group-hover:text-xl"></i>
              </div>
            </a>
            <a href="https://www.youtube.com/@krishdesign" class="social-icon group" target="_blank">
              <div class="relative w-8 h-8 xs:w-9 xs:h-9 sm:w-10 sm:h-10 rounded-full bg-bg-secondary/40 backdrop-blur-md flex items-center justify-center shadow-md transform transition-all duration-500 group-hover:scale-110 group-hover:shadow-glow-accent overflow-hidden">
                <!-- Animated background glow -->
                <div class="absolute inset-0 bg-gradient-to-r from-accent/20 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                <!-- Animated border effect -->
                <div class="absolute inset-0 border border-accent/20 rounded-full group-hover:border-accent/60 transition-colors duration-500"></div>
                <!-- Animated ripple effect -->
                <div class="absolute inset-0 scale-0 rounded-full border border-accent/40 group-hover:scale-150 group-hover:opacity-0 transition-all duration-1000"></div>
                <!-- Icon with enhanced animation -->
                <i class="fab fa-youtube text-text-secondary group-hover:text-accent transition-all duration-500 relative z-10 text-sm xs:text-base sm:text-lg group-hover:text-base xs:group-hover:text-lg sm:group-hover:text-xl"></i>
              </div>
            </a>
          </div>
        </div>

        <!-- Right Content Column - Modern Floating Grid Skills Showcase -->
        <div class="md:col-span-5 relative skill-showcase hidden md:block">
          <!-- Floating Grid Skills Container -->
          <div class="relative h-96 w-full overflow-hidden">
            <!-- Background Elements -->
            <div class="absolute inset-0 bg-gradient-to-br from-bg-secondary/5 to-bg-secondary/10 backdrop-blur-sm rounded-2xl shadow-xl overflow-hidden">
              <!-- Animated background elements -->
              <div class="absolute w-40 h-40 rounded-full bg-primary/5 blur-3xl -top-10 -left-10 animate-pulse-slow"></div>
              <div class="absolute w-40 h-40 rounded-full bg-secondary/5 blur-3xl -bottom-10 -right-10 animate-pulse-slow-reverse"></div>
              <div class="absolute w-full h-px top-1/2 bg-gradient-to-r from-transparent via-primary/20 to-transparent"></div>
              <div class="absolute h-full w-px left-1/2 bg-gradient-to-b from-transparent via-secondary/20 to-transparent"></div>
            </div>

            <!-- Skills Grid Layout -->
            <div class="absolute inset-0 p-6 grid grid-cols-12 grid-rows-12 gap-4 z-10">
              <!-- Video Editing Card - Larger, spanning multiple grid cells -->
              <div class="skill-card col-span-7 row-span-7 group" data-skill="video">
                <div class="relative h-full w-full rounded-xl overflow-hidden transform transition-all duration-500 hover:scale-[1.02] hover:shadow-glow-primary">
                  <!-- Card Background with Gradient -->
                  <div class="absolute inset-0 bg-gradient-to-br from-bg-secondary/40 to-bg-secondary/20 backdrop-blur-md border border-primary/20 group-hover:border-primary/40 transition-colors duration-500"></div>

                  <!-- Card Content -->
                  <div class="relative h-full p-5 flex flex-col justify-between z-10">
                    <!-- Icon with animated background -->
                    <div class="skill-icon-container relative mb-auto">
                      <div class="absolute inset-0 bg-primary/10 rounded-full blur-xl transform scale-150 opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                      <div class="relative w-16 h-16 rounded-xl bg-primary/20 flex items-center justify-center group-hover:bg-primary/30 transition-all duration-500 transform group-hover:-translate-y-2">
                        <i class="fas fa-video text-2xl text-primary"></i>
                      </div>
                    </div>

                    <!-- Content with animated line -->
                    <div class="mt-auto">
                      <h3 class="text-2xl font-display font-bold text-white mb-2 group-hover:text-primary transition-colors duration-500">Video Editing</h3>
                      <div class="w-0 h-0.5 bg-primary/50 group-hover:w-full transition-all duration-700 mb-3"></div>
                      <p class="text-text-secondary text-sm">Professional video editing and color grading</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- UX/UI Design Card -->
              <div class="skill-card col-span-5 row-span-4 col-start-8 row-start-1 group" data-skill="ux">
                <div class="relative h-full w-full rounded-xl overflow-hidden transform transition-all duration-500 hover:scale-[1.02] hover:shadow-glow-secondary">
                  <!-- Card Background with Gradient -->
                  <div class="absolute inset-0 bg-gradient-to-br from-bg-secondary/40 to-bg-secondary/20 backdrop-blur-md border border-secondary/20 group-hover:border-secondary/40 transition-colors duration-500"></div>

                  <!-- Card Content -->
                  <div class="relative h-full p-5 flex flex-col justify-between z-10">
                    <!-- Icon with animated background -->
                    <div class="skill-icon-container relative mb-auto">
                      <div class="absolute inset-0 bg-secondary/10 rounded-full blur-xl transform scale-150 opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                      <div class="relative w-12 h-12 rounded-xl bg-secondary/20 flex items-center justify-center group-hover:bg-secondary/30 transition-all duration-500 transform group-hover:-translate-y-2">
                        <i class="fas fa-desktop text-xl text-secondary"></i>
                      </div>
                    </div>

                    <!-- Content with animated line -->
                    <div class="mt-auto">
                      <h3 class="text-xl font-display font-bold text-white mb-2 group-hover:text-secondary transition-colors duration-500">UX/UI Design</h3>
                      <div class="w-0 h-0.5 bg-secondary/50 group-hover:w-full transition-all duration-700 mb-3"></div>
                      <p class="text-text-secondary text-xs">User-centered interfaces and experiences</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Graphic Design Card -->
              <div class="skill-card col-span-5 row-span-4 col-start-8 row-start-5 group" data-skill="graphic">
                <div class="relative h-full w-full rounded-xl overflow-hidden transform transition-all duration-500 hover:scale-[1.02] hover:shadow-glow-accent">
                  <!-- Card Background with Gradient -->
                  <div class="absolute inset-0 bg-gradient-to-br from-bg-secondary/40 to-bg-secondary/20 backdrop-blur-md border border-accent/20 group-hover:border-accent/40 transition-colors duration-500"></div>

                  <!-- Card Content -->
                  <div class="relative h-full p-5 flex flex-col justify-between z-10">
                    <!-- Icon with animated background -->
                    <div class="skill-icon-container relative mb-auto">
                      <div class="absolute inset-0 bg-accent/10 rounded-full blur-xl transform scale-150 opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                      <div class="relative w-12 h-12 rounded-xl bg-accent/20 flex items-center justify-center group-hover:bg-accent/30 transition-all duration-500 transform group-hover:-translate-y-2">
                        <i class="fas fa-palette text-xl text-accent"></i>
                      </div>
                    </div>

                    <!-- Content with animated line -->
                    <div class="mt-auto">
                      <h3 class="text-xl font-display font-bold text-white mb-2 group-hover:text-accent transition-colors duration-500">Graphic Design</h3>
                      <div class="w-0 h-0.5 bg-accent/50 group-hover:w-full transition-all duration-700 mb-3"></div>
                      <p class="text-text-secondary text-xs">Visual communication and brand identity</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Web Design Card -->
              <div class="skill-card col-span-7 row-span-5 col-start-1 row-start-8 group" data-skill="web">
                <div class="relative h-full w-full rounded-xl overflow-hidden transform transition-all duration-500 hover:scale-[1.02] hover:shadow-glow-tertiary">
                  <!-- Card Background with Gradient -->
                  <div class="absolute inset-0 bg-gradient-to-br from-bg-secondary/40 to-bg-secondary/20 backdrop-blur-md border border-tertiary-color/20 group-hover:border-tertiary-color/40 transition-colors duration-500"></div>

                  <!-- Card Content -->
                  <div class="relative h-full p-5 flex flex-col justify-between z-10">
                    <!-- Icon with animated background -->
                    <div class="skill-icon-container relative mb-auto">
                      <div class="absolute inset-0 bg-tertiary-color/10 rounded-full blur-xl transform scale-150 opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                      <div class="relative w-14 h-14 rounded-xl bg-tertiary-color/20 flex items-center justify-center group-hover:bg-tertiary-color/30 transition-all duration-500 transform group-hover:-translate-y-2">
                        <i class="fas fa-code text-xl text-tertiary-color"></i>
                      </div>
                    </div>

                    <!-- Content with animated line -->
                    <div class="mt-auto">
                      <h3 class="text-xl font-display font-bold text-white mb-2 group-hover:text-tertiary-color transition-colors duration-500">Web Design</h3>
                      <div class="w-0 h-0.5 bg-tertiary-color/50 group-hover:w-full transition-all duration-700 mb-3"></div>
                      <p class="text-text-secondary text-sm">Modern, responsive websites with clean aesthetics</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Decorative Element - Floating Badge -->
              <div class="col-span-5 row-span-5 col-start-8 row-start-9 flex items-center justify-center">
                <div class="relative w-24 h-24 rounded-full bg-bg-secondary/30 backdrop-blur-md flex items-center justify-center animate-float">
                  <div class="absolute inset-0 bg-gradient-to-br from-primary/20 via-secondary/20 to-accent/20 rounded-full blur-md opacity-50"></div>
                  <div class="text-white/80 text-xs font-mono tracking-wider text-center">
                    <div class="font-bold mb-1">2+</div>
                    <div>YEARS</div>
                    <div>EXPERIENCE</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Mobile Skill Icons (visible only on mobile) -->
        <div class="md:hidden relative h-36 mb-8 skill-icons-container">
          <!-- Mobile Skills Title -->
          <div class="text-center mb-4">
            <h3 class="text-lg font-display font-bold text-white">My Skills</h3>
            <div class="w-16 h-0.5 bg-primary/50 mx-auto mt-1"></div>
          </div>

          <!-- Mobile Skills Grid -->
          <div class="grid grid-cols-4 gap-2 px-4">
            <!-- Video Editing Icon -->
            <div class="skill-icon video-icon flex flex-col items-center">
              <div class="w-14 h-14 xs:w-16 xs:h-16 sm:w-18 sm:h-18 rounded-2xl bg-primary/20 backdrop-blur-md flex items-center justify-center border border-primary/30 shadow-lg transform transition-all duration-500 hover:scale-110 hover:-translate-y-1 hover:shadow-glow-primary">
                <i class="fas fa-video text-lg xs:text-xl sm:text-2xl text-primary"></i>
              </div>
              <span class="block text-center text-xs sm:text-sm mt-2 text-text-secondary">Video Editing</span>
            </div>

            <!-- UX/UI Design Icon -->
            <div class="skill-icon ux-icon flex flex-col items-center">
              <div class="w-14 h-14 xs:w-16 xs:h-16 sm:w-18 sm:h-18 rounded-2xl bg-secondary/20 backdrop-blur-md flex items-center justify-center border border-secondary/30 shadow-lg transform transition-all duration-500 hover:scale-110 hover:-translate-y-1 hover:shadow-glow-secondary">
                <i class="fas fa-desktop text-lg xs:text-xl sm:text-2xl text-secondary"></i>
              </div>
              <span class="block text-center text-xs sm:text-sm mt-2 text-text-secondary">UX/UI Design</span>
            </div>

            <!-- Graphic Design Icon -->
            <div class="skill-icon graphic-icon flex flex-col items-center">
              <div class="w-14 h-14 xs:w-16 xs:h-16 sm:w-18 sm:h-18 rounded-2xl bg-accent/20 backdrop-blur-md flex items-center justify-center border border-accent/30 shadow-lg transform transition-all duration-500 hover:scale-110 hover:-translate-y-1 hover:shadow-glow-accent">
                <i class="fas fa-palette text-lg xs:text-xl sm:text-2xl text-accent"></i>
              </div>
              <span class="block text-center text-xs sm:text-sm mt-2 text-text-secondary">Graphic Design</span>
            </div>

            <!-- Web Design Icon -->
            <div class="skill-icon web-icon flex flex-col items-center">
              <div class="w-14 h-14 xs:w-16 xs:h-16 sm:w-18 sm:h-18 rounded-2xl bg-tertiary-color/20 backdrop-blur-md flex items-center justify-center border border-tertiary-color/30 shadow-lg transform transition-all duration-500 hover:scale-110 hover:-translate-y-1 hover:shadow-glow-tertiary">
                <i class="fas fa-code text-lg xs:text-xl sm:text-2xl text-tertiary-color"></i>
              </div>
              <span class="block text-center text-xs sm:text-sm mt-2 text-text-secondary">Web Design</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Scroll Indicator - Responsive for All Devices -->
    <div class="absolute bottom-4 xs:bottom-6 sm:bottom-8 left-1/2 transform -translate-x-1/2 z-20 scroll-indicator hidden xs:block">
      <div class="w-6 xs:w-7 sm:w-8 h-9 xs:h-10 sm:h-12 rounded-full border border-text-secondary/70 xs:border-2 flex items-center justify-center">
        <div class="w-1.5 xs:w-1.5 sm:w-2 h-1.5 xs:h-1.5 sm:h-2 bg-primary rounded-full animate-bounce"></div>
      </div>
      <span class="block text-center text-xs xs:text-xs sm:text-sm mt-1 xs:mt-1.5 sm:mt-2 text-text-secondary">Scroll Down</span>
    </div>
  </section>

  <!-- Three.js and GSAP Animation Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Modern Particle Skills Showcase
      initParticleSkills();

      // Function to initialize the particle skills showcase
      function initParticleSkills() {
        const skillsCanvas = document.getElementById('skills-particle-canvas');
        if (!skillsCanvas) return;

        // Initialize Three.js scene for particles
        const skillsScene = new THREE.Scene();
        const skillsCamera = new THREE.PerspectiveCamera(60, skillsCanvas.clientWidth / skillsCanvas.clientHeight, 0.1, 1000);
        const skillsRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });

        skillsRenderer.setSize(skillsCanvas.clientWidth, skillsCanvas.clientHeight);
        skillsRenderer.setPixelRatio(window.devicePixelRatio);
        skillsCanvas.appendChild(skillsRenderer.domElement);

        // Camera position
        skillsCamera.position.z = 5;

        // Skill colors
        const skillColors = {
          video: 0x60a5fa,     // primary
          ux: 0xa78bfa,        // secondary
          graphic: 0xfbbf24,   // accent
          web: 0x34d399        // tertiary
        };

        // Create particle systems for each skill
        const particleSystems = {};
        const particleCount = 100; // Number of particles per skill

        // Create particle geometry that will be shared by all systems
        const particleGeometry = new THREE.BufferGeometry();
        const positions = new Float32Array(particleCount * 3);

        // Randomize initial positions in a sphere
        for (let i = 0; i < particleCount; i++) {
          const i3 = i * 3;
          positions[i3] = (Math.random() - 0.5) * 5;
          positions[i3 + 1] = (Math.random() - 0.5) * 5;
          positions[i3 + 2] = (Math.random() - 0.5) * 5 - 2; // Push back in z-space
        }

        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

        // Create particle systems for each skill
        Object.keys(skillColors).forEach(skill => {
          // Create material with skill color
          const particleMaterial = new THREE.PointsMaterial({
            color: skillColors[skill],
            size: 0.1,
            transparent: true,
            opacity: 0.7,
            blending: THREE.AdditiveBlending,
            sizeAttenuation: true
          });

          // Create particle system
          const particles = new THREE.Points(particleGeometry.clone(), particleMaterial);
          particles.visible = false; // Hide initially
          skillsScene.add(particles);

          // Store reference
          particleSystems[skill] = {
            particles,
            originalPositions: [...positions], // Store original positions
            targetPositions: [...positions],   // Will be updated on hover
            velocities: new Float32Array(particleCount * 3).fill(0) // For physics simulation
          };
        });

        // Show video particles by default
        particleSystems.video.particles.visible = true;

        // Handle skill card interactions
        const skillCards = document.querySelectorAll('.skill-card');
        let activeSkill = 'video'; // Default active skill

        skillCards.forEach(card => {
          const skill = card.getAttribute('data-skill');

          // Mouse enter - show this skill's particles
          card.addEventListener('mouseenter', () => {
            // Hide all particle systems
            Object.keys(particleSystems).forEach(s => {
              if (s !== skill) {
                // Fade out other systems
                gsap.to(particleSystems[s].particles.material, {
                  opacity: 0,
                  duration: 0.5,
                  onComplete: () => {
                    particleSystems[s].particles.visible = false;
                  }
                });
              }
            });

            // Show this skill's particles
            particleSystems[skill].particles.visible = true;
            particleSystems[skill].particles.material.opacity = 0;

            // Animate in
            gsap.to(particleSystems[skill].particles.material, {
              opacity: 0.7,
              duration: 0.5
            });

            // Explode particles outward
            const positions = particleSystems[skill].particles.geometry.attributes.position.array;
            for (let i = 0; i < particleCount; i++) {
              const i3 = i * 3;

              // Set target positions in an exploded state
              particleSystems[skill].targetPositions[i3] = particleSystems[skill].originalPositions[i3] * 2;
              particleSystems[skill].targetPositions[i3 + 1] = particleSystems[skill].originalPositions[i3 + 1] * 2;
              particleSystems[skill].targetPositions[i3 + 2] = particleSystems[skill].originalPositions[i3 + 2] * 2;
            }

            // Update active skill
            activeSkill = skill;
          });

          // Mouse leave - implode particles
          card.addEventListener('mouseleave', () => {
            // Return particles to original positions
            const positions = particleSystems[skill].particles.geometry.attributes.position.array;
            for (let i = 0; i < particleCount; i++) {
              const i3 = i * 3;

              // Set target positions back to original
              particleSystems[skill].targetPositions[i3] = particleSystems[skill].originalPositions[i3];
              particleSystems[skill].targetPositions[i3 + 1] = particleSystems[skill].originalPositions[i3 + 1];
              particleSystems[skill].targetPositions[i3 + 2] = particleSystems[skill].originalPositions[i3 + 2];
            }
          });
        });

        // Animation loop
        function animateParticles() {
          requestAnimationFrame(animateParticles);

          // Update all visible particle systems
          Object.keys(particleSystems).forEach(skill => {
            if (particleSystems[skill].particles.visible) {
              const positions = particleSystems[skill].particles.geometry.attributes.position.array;
              const targetPositions = particleSystems[skill].targetPositions;
              const velocities = particleSystems[skill].velocities;

              // Physics-based animation
              for (let i = 0; i < particleCount; i++) {
                const i3 = i * 3;

                // Calculate force towards target (spring physics)
                const forceX = (targetPositions[i3] - positions[i3]) * 0.01;
                const forceY = (targetPositions[i3 + 1] - positions[i3 + 1]) * 0.01;
                const forceZ = (targetPositions[i3 + 2] - positions[i3 + 2]) * 0.01;

                // Apply force to velocity (with damping)
                velocities[i3] = velocities[i3] * 0.9 + forceX;
                velocities[i3 + 1] = velocities[i3 + 1] * 0.9 + forceY;
                velocities[i3 + 2] = velocities[i3 + 2] * 0.9 + forceZ;

                // Apply velocity to position
                positions[i3] += velocities[i3];
                positions[i3 + 1] += velocities[i3 + 1];
                positions[i3 + 2] += velocities[i3 + 2];

                // Add some random movement
                if (skill === activeSkill) {
                  positions[i3] += (Math.random() - 0.5) * 0.01;
                  positions[i3 + 1] += (Math.random() - 0.5) * 0.01;
                  positions[i3 + 2] += (Math.random() - 0.5) * 0.01;
                }
              }

              // Rotate the entire particle system
              particleSystems[skill].particles.rotation.y += 0.002;

              // Update geometry
              particleSystems[skill].particles.geometry.attributes.position.needsUpdate = true;
            }
          });

          // Render scene
          skillsRenderer.render(skillsScene, skillsCamera);
        }

        // Handle window resize
        window.addEventListener('resize', () => {
          const width = skillsCanvas.clientWidth;
          const height = skillsCanvas.clientHeight;

          skillsCamera.aspect = width / height;
          skillsCamera.updateProjectionMatrix();
          skillsRenderer.setSize(width, height);
        });

        // Start animation
        animateParticles();
      }
      // Initialize Three.js scene
      const canvas = document.getElementById('hero-canvas');
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });

      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(window.devicePixelRatio);
      canvas.appendChild(renderer.domElement);

      // Camera position
      camera.position.z = 30;

      // Create starfield effect with tiny star-like particles
      const particlesGeometry = new THREE.BufferGeometry();
      const particlesCount = 45000; // Extremely dense starfield (3x more particles)

      const posArray = new Float32Array(particlesCount * 3);
      const colorsArray = new Float32Array(particlesCount * 3);
      const sizeArray = new Float32Array(particlesCount);

      // Star colors - mostly white/blue with occasional yellow/red for variety
      const starColors = [
        new THREE.Color(0xffffff), // white (most common)
        new THREE.Color(0xffffff), // white duplicate to increase probability
        new THREE.Color(0xffffff), // white duplicate to increase probability
        new THREE.Color(0xd8e8ff), // light blue
        new THREE.Color(0xd8e8ff), // light blue duplicate
        new THREE.Color(0xffeedd), // warm white
        new THREE.Color(0xffd6a5), // yellow/orange (rare)
        new THREE.Color(0xffb3b3)  // reddish (very rare)
      ];

      // Create random stars distributed across the sky - more stars for a denser night sky
      for(let i = 0; i < particlesCount * 3; i += 3) {
        // Position stars randomly throughout the scene
        // Use a wider distribution for x and y, but keep z further back
        posArray[i] = (Math.random() - 0.5) * 200;     // x position (even wider spread)
        posArray[i+1] = (Math.random() - 0.5) * 200;   // y position (even wider spread)
        posArray[i+2] = (Math.random() - 0.5) * 150 - 50; // z position (mostly negative/behind)

        // Create a realistic star distribution with slightly larger tiny stars
        const sizeFactor = Math.random();
        if (sizeFactor > 0.998) {
          // Extremely rare "very bright" star (0.2%)
          sizeArray[i/3] = 0.2 + Math.random() * 0.15; // Increased size
        } else if (sizeFactor > 0.99) {
          // Very rare "bright" star (0.8%)
          sizeArray[i/3] = 0.15 + Math.random() * 0.1; // Increased size
        } else if (sizeFactor > 0.97) {
          // Uncommon medium star (2%)
          sizeArray[i/3] = 0.08 + Math.random() * 0.07; // Increased size
        } else if (sizeFactor > 0.85) {
          // Common small star (12%)
          sizeArray[i/3] = 0.05 + Math.random() * 0.03; // Increased size
        } else {
          // Most stars are tiny (85%) - but slightly larger now
          sizeArray[i/3] = 0.025 + Math.random() * 0.025; // Increased size
        }

        // Star color - weighted toward white/blue
        const colorIndex = Math.floor(Math.random() * starColors.length);
        const color = starColors[colorIndex];
        colorsArray[i] = color.r;
        colorsArray[i+1] = color.g;
        colorsArray[i+2] = color.b;
      }

      particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
      particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArray, 3));
      particlesGeometry.setAttribute('size', new THREE.BufferAttribute(sizeArray, 1));

      // Material for stars - optimized for extremely dense starfield
      const particlesMaterial = new THREE.PointsMaterial({
        size: 0.3, // Increased base size for better visibility
        transparent: true,
        opacity: 1.0, // Full opacity for better visibility
        vertexColors: true,
        blending: THREE.AdditiveBlending, // Additive blending for glow effect
        sizeAttenuation: true, // Stars get smaller with distance
        map: createStarTexture(), // Custom texture for stars
        depthWrite: false, // Improves rendering performance with many particles
        depthTest: false // Further performance optimization for dense starfields
      });

      // Performance optimization for renderer
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Limit pixel ratio for better performance

      // Create a texture for stars to make them look like actual stars - enhanced for better visibility
      function createStarTexture() {
        const canvas = document.createElement('canvas');
        canvas.width = 64; // Larger texture for more detail
        canvas.height = 64;

        const context = canvas.getContext('2d');
        const gradient = context.createRadialGradient(32, 32, 0, 32, 32, 32);
        gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
        gradient.addColorStop(0.1, 'rgba(255, 255, 255, 0.9)');
        gradient.addColorStop(0.3, 'rgba(255, 255, 255, 0.6)');
        gradient.addColorStop(0.6, 'rgba(255, 255, 255, 0.3)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');

        context.fillStyle = gradient;
        context.fillRect(0, 0, 64, 64);

        // Add a subtle cross shape for a star-like appearance
        context.strokeStyle = 'rgba(255, 255, 255, 0.8)';
        context.lineWidth = 1;

        // Horizontal line
        context.beginPath();
        context.moveTo(16, 32);
        context.lineTo(48, 32);
        context.stroke();

        // Vertical line
        context.beginPath();
        context.moveTo(32, 16);
        context.lineTo(32, 48);
        context.stroke();

        const texture = new THREE.Texture(canvas);
        texture.needsUpdate = true;
        return texture;
      }

      // Mesh
      const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
      scene.add(particlesMesh);

      // We're removing the large colored circles/nebulae to create a cleaner night sky effect

      // Create a few very subtle, small glowing areas to add depth
      const createStarCluster = () => {
        // Create a small, very subtle glow for star clusters
        const geometry = new THREE.BufferGeometry();
        const clusterCount = 10; // Number of subtle clusters

        const positions = new Float32Array(clusterCount * 3);
        const colors = new Float32Array(clusterCount * 3);
        const sizes = new Float32Array(clusterCount);

        for(let i = 0; i < clusterCount; i++) {
          // Position clusters randomly but further back
          positions[i*3] = (Math.random() - 0.5) * 100;
          positions[i*3+1] = (Math.random() - 0.5) * 100;
          positions[i*3+2] = -50 - Math.random() * 50; // Always behind

          // Very subtle blue/white colors
          const shade = 0.5 + Math.random() * 0.5; // Value between 0.5 and 1
          colors[i*3] = shade;
          colors[i*3+1] = shade;
          colors[i*3+2] = shade + Math.random() * 0.2; // Slightly more blue

          // Larger but very transparent
          sizes[i] = 5 + Math.random() * 5;
        }

        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

        const material = new THREE.PointsMaterial({
          size: 15,
          transparent: true,
          opacity: 0.05,
          vertexColors: true,
          blending: THREE.AdditiveBlending,
          sizeAttenuation: true,
          map: createStarTexture()
        });

        const clusters = new THREE.Points(geometry, material);
        scene.add(clusters);
      };

      // Add a few subtle star clusters
      createStarCluster();

      // Animation
      const clock = new THREE.Clock();

      // Create arrays to track star twinkling
      const twinkleSpeed = new Float32Array(particlesCount);
      const twinklePhase = new Float32Array(particlesCount);

      // Create arrays to track original positions for cursor interaction
      const originalPositions = new Float32Array(particlesCount * 3);

      // Copy original positions for reference
      for(let i = 0; i < particlesCount * 3; i++) {
        originalPositions[i] = posArray[i];
      }

      // Initialize twinkling parameters
      for(let i = 0; i < particlesCount; i++) {
        // Random speed for each star
        twinkleSpeed[i] = 0.3 + Math.random() * 2;
        // Random starting phase
        twinklePhase[i] = Math.random() * Math.PI * 2;
      }

      // Variables for cursor interaction
      // We'll use the existing mouseX and mouseY variables
      let mouseRadius = 100; // Radius of influence around cursor
      let mouseScreenX = 0; // Mouse position in screen coordinates
      let mouseScreenY = 0;
      let isMouseDown = false; // Track mouse button state
      let interactionMode = 3; // Default to Wave mode (3) instead of Repel (0)
      let lastInteractionSwitch = 0; // Time tracking for auto mode switching
      let waveTime = 0; // Time variable for wave effect
      let autoSwitchEnabled = false; // Disable auto-switching by default

      const animate = () => {
        const elapsedTime = clock.getElapsedTime();

        // Subtle twinkling effect for stars
        const sizes = particlesGeometry.attributes.size.array;
        const positions = particlesGeometry.attributes.position.array;

        // Convert mouse position from screen to normalized device coordinates (-1 to +1)
        const mouseNDCX = (mouseScreenX / window.innerWidth) * 2 - 1;
        const mouseNDCY = -(mouseScreenY / window.innerHeight) * 2 + 1;

        // Convert to world coordinates (improved approximation)
        // Use camera FOV and distance to calculate better world coordinates
        const fovRadians = camera.fov * (Math.PI / 180);
        const screenHeight = 2 * Math.tan(fovRadians / 2) * camera.position.z;
        const screenWidth = screenHeight * camera.aspect;

        const worldX = mouseNDCX * (screenWidth / 2);
        const worldY = mouseNDCY * (screenHeight / 2);

        // Twinkling effect for brighter stars
        for(let i = 0; i < particlesCount; i++) {
          // Only make some stars twinkle (the brighter ones)
          if(sizes[i] > 0.08) { // Increased threshold to match our larger star sizes
            // Calculate twinkling factor using sine wave
            const twinkleFactor = Math.sin(elapsedTime * twinkleSpeed[i] + twinklePhase[i]);

            // Apply subtle size variation for twinkling
            const originalSize = sizeArray[i];
            sizes[i] = originalSize * (0.8 + 0.2 * twinkleFactor);
          }
        }

        // Only auto-switch if explicitly enabled
        if (autoSwitchEnabled && elapsedTime - lastInteractionSwitch > 5) { // Switch every 5 seconds
          // Only auto-switch if not manually changed recently
          if (!isMouseDown) {
            interactionMode = (interactionMode + 1) % 4; // Cycle through modes
            lastInteractionSwitch = elapsedTime;
          }
        }

        // Update wave time for wave effect
        waveTime += 0.05;

        // Cursor interaction with ALL particles
        // Process every particle for a more consistent effect
        for(let i = 0; i < particlesCount * 3; i += 3) {
          // Get original position
          const origX = originalPositions[i];
          const origY = originalPositions[i+1];
          const origZ = originalPositions[i+2];

          // Calculate distance from cursor in world space
          const dx = origX - worldX;
          const dy = origY - worldY;
          const distance = Math.sqrt(dx * dx + dy * dy);

          // If within influence radius, apply the current interaction mode
          if (distance < mouseRadius) {
            // Calculate interaction factor (stronger when closer)
            const factor = 1 - distance / mouseRadius;

            // Different interaction modes
            switch(interactionMode) {
              case 0: // Repel mode - particles move away from cursor
                const repelStrength = 4;
                positions[i] = origX + (dx / distance) * factor * repelStrength;
                positions[i+1] = origY + (dy / distance) * factor * repelStrength;
                break;

              case 1: // Attract mode - particles move toward cursor
                const attractStrength = 2;
                positions[i] = origX - (dx / distance) * factor * attractStrength;
                positions[i+1] = origY - (dy / distance) * factor * attractStrength;
                break;

              case 2: // Vortex mode - particles swirl around cursor
                const vortexStrength = 3;
                const angle = Math.atan2(dy, dx) + factor * 0.2; // Rotation angle
                const newDist = distance * (0.8 + 0.2 * factor); // Slightly pull inward
                positions[i] = worldX + Math.cos(angle) * newDist;
                positions[i+1] = worldY + Math.sin(angle) * newDist;
                break;

              case 3: // Wave mode - particles form waves radiating from cursor
                const waveStrength = 2;
                const waveFreq = 0.2;
                const wavePhase = distance * waveFreq - waveTime;
                const waveFactor = Math.sin(wavePhase) * factor * waveStrength;
                positions[i] = origX + (dx / distance) * waveFactor;
                positions[i+1] = origY + (dy / distance) * waveFactor;
                break;
            }
          } else {
            // Gradually return to original position when outside influence
            const returnSpeed = 0.05;
            positions[i] += (origX - positions[i]) * returnSpeed;
            positions[i+1] += (origY - positions[i+1]) * returnSpeed;
          }
        }

        // Update the attributes
        particlesGeometry.attributes.size.needsUpdate = true;
        particlesGeometry.attributes.position.needsUpdate = true;

        // No rotation - stars are static except for cursor interaction

        renderer.render(scene, camera);
        requestAnimationFrame(animate);
      };

      // Mouse movement effect
      let mouseX = 0;
      let mouseY = 0;

      document.addEventListener('mousemove', (event) => {
        // Track mouse position for Three.js scene interaction
        mouseScreenX = event.clientX;
        mouseScreenY = event.clientY;

        // Also track normalized position for other effects
        mouseX = event.clientX - window.innerWidth / 2;
        mouseY = event.clientY - window.innerHeight / 2;
      });

      // Mouse click events for interaction mode switching
      document.addEventListener('mousedown', () => {
        isMouseDown = true;
      });

      document.addEventListener('click', () => {
        // Change interaction mode only on click (not just mousedown)
        interactionMode = (interactionMode + 1) % 4;
        lastInteractionSwitch = clock.getElapsedTime();

        // Update the mode indicator text immediately
        const modeIndicator = document.querySelector('div[style*="position: fixed"][style*="bottom: 20px"]');
        if (modeIndicator) {
          const modes = ['Repel', 'Attract', 'Vortex', 'Wave'];
          modeIndicator.textContent = `Mode: ${modes[interactionMode]} (click to change)`;
        }
      });

      document.addEventListener('mouseup', () => {
        isMouseDown = false;
      });

      // Keyboard controls for interaction modes
      document.addEventListener('keydown', (event) => {
        // Number keys 1-4 to select modes
        if (event.key >= '1' && event.key <= '4') {
          interactionMode = parseInt(event.key) - 1;
          lastInteractionSwitch = clock.getElapsedTime();
        }
      });

      // Add visual indicator for current mode
      const modeIndicator = document.createElement('div');
      modeIndicator.style.position = 'fixed';
      modeIndicator.style.bottom = '20px';
      modeIndicator.style.right = '20px';
      modeIndicator.style.padding = '10px';
      modeIndicator.style.background = 'rgba(0,0,0,0.5)';
      modeIndicator.style.color = 'white';
      modeIndicator.style.borderRadius = '5px';
      modeIndicator.style.fontFamily = 'sans-serif';
      modeIndicator.style.fontSize = '14px';
      modeIndicator.style.zIndex = '1000';
      modeIndicator.style.pointerEvents = 'none'; // Don't interfere with clicks
      document.body.appendChild(modeIndicator);

      // Set initial mode indicator text to Wave (mode 3)
      const modes = ['Repel', 'Attract', 'Vortex', 'Wave'];
      modeIndicator.textContent = `Mode: ${modes[interactionMode]} (click to change)`;

      // No need to update constantly since we're not auto-switching
      // Only update on click (handled in click event)

      // Handle window resize
      window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });

      // Start animation
      animate();

      // GSAP Animations
      gsap.registerPlugin(ScrollTrigger);

      // Initial animations
      const tl = gsap.timeline();

      // Left column animations
      tl.from('.hero-badge', { opacity: 0, y: 20, duration: 0.8, ease: 'power3.out' })
        .from('.hero-title', { opacity: 0, y: 30, duration: 1, ease: 'power3.out' }, '-=0.4')
        .from('.hero-name', { opacity: 0, y: 30, duration: 1, ease: 'power3.out' }, '-=0.8')
        .from('.hero-subtitle', { opacity: 0, y: 30, duration: 1, ease: 'power3.out' }, '-=0.8')
        .from('.hero-buttons', { opacity: 0, y: 30, duration: 1, ease: 'power3.out' }, '-=0.8')
        .from('.social-links', { opacity: 0, y: 30, duration: 1, ease: 'power3.out' }, '-=0.6')

        // Right column animations
        .from('.skill-showcase', {
          opacity: 0,
          x: 50,
          duration: 1,
          ease: 'power3.out'
        }, '-=1.2')
        .from('.skill-card', {
          opacity: 0,
          y: 20,
          duration: 0.8,
          stagger: 0.15,
          ease: 'power3.out'
        }, '-=0.8')

        // Mobile skill icons
        .from('.skill-icon', {
          opacity: 0,
          y: 40,
          duration: 0.8,
          stagger: 0.15,
          ease: 'power3.out'
        }, '-=1')

        // Scroll indicator
        .from('.scroll-indicator', { opacity: 0, y: -20, duration: 1, ease: 'power3.out' }, '-=0.6');

      // Floating animation for skill icons
      gsap.to('.video-icon', {
        y: '-=20',
        x: '-=10',
        duration: 2,
        repeat: -1,
        yoyo: true,
        ease: 'sine.inOut'
      });

      gsap.to('.ux-icon', {
        y: '-=15',
        x: '+=15',
        duration: 2.5,
        repeat: -1,
        yoyo: true,
        ease: 'sine.inOut',
        delay: 0.5
      });

      gsap.to('.graphic-icon', {
        y: '-=25',
        x: '-=5',
        duration: 3,
        repeat: -1,
        yoyo: true,
        ease: 'sine.inOut',
        delay: 0.2
      });

      gsap.to('.web-icon', {
        y: '-=10',
        x: '+=20',
        duration: 2.2,
        repeat: -1,
        yoyo: true,
        ease: 'sine.inOut',
        delay: 0.7
      });

      // Button hover effects
      const buttons = document.querySelectorAll('.hero-buttons a');
      buttons.forEach(button => {
        button.addEventListener('mouseenter', () => {
          gsap.to(button, {
            scale: 1.05,
            duration: 0.3,
            ease: 'power2.out'
          });
        });

        button.addEventListener('mouseleave', () => {
          gsap.to(button, {
            scale: 1,
            duration: 0.3,
            ease: 'power2.out'
          });
        });
      });

      // Glitch effect for text
      const glitchText = document.querySelector('.glitch-text');
      const glitchInterval = setInterval(() => {
        gsap.to(glitchText, {
          skewX: 20,
          duration: 0.1,
          onComplete: () => {
            gsap.to(glitchText, {
              skewX: 0,
              duration: 0.1
            });
          }
        });

        // Random opacity flicker
        gsap.to(glitchText, {
          opacity: 0.8,
          duration: 0.05,
          onComplete: () => {
            gsap.to(glitchText, {
              opacity: 1,
              duration: 0.05
            });
          }
        });
      }, 3000);

      // Position skill icons initially (for mobile)
      gsap.set('.video-icon', { left: '15%', top: '10%' });
      gsap.set('.ux-icon', { left: '35%', top: '60%' });
      gsap.set('.graphic-icon', { right: '35%', top: '15%' });
      gsap.set('.web-icon', { right: '15%', top: '55%' });

      // Add hover animations for skill cards
      const skillCards = document.querySelectorAll('.skill-card');
      skillCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
          gsap.to(card, {
            y: -5,
            boxShadow: '0 10px 20px rgba(0,0,0,0.2)',
            duration: 0.3,
            ease: 'power2.out'
          });
        });

        card.addEventListener('mouseleave', () => {
          gsap.to(card, {
            y: 0,
            boxShadow: '0 0 0 rgba(0,0,0,0)',
            duration: 0.3,
            ease: 'power2.out'
          });
        });
      });

      // Pulse animation for the dot
      gsap.to('.pulse-dot', {
        scale: 1.5,
        opacity: 0.5,
        duration: 1,
        repeat: -1,
        yoyo: true,
        ease: 'sine.inOut'
      });

      // Scroll trigger for parallax effect
      gsap.to('#hero-canvas', {
        scrollTrigger: {
          trigger: '#home',
          start: 'top top',
          end: 'bottom top',
          scrub: true
        },
        y: 200,
        opacity: 0.5
      });
    });
  </script>

  <!-- Include all sections -->
  <%- include('partials/skills') %>
  <%- include('partials/portfolio') %>
  <%- include('partials/about') %>
  <%- include('partials/contact') %>

  <!-- Footer -->
  <%- include('partials/footer') %>
